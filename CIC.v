// -------------------------------------------------------------
// 
// File Name: D:\Kursach\hdlsrc\CIC_fixp1\CIC.v
// Created: 2020-11-16 22:11:48
// 
// Generated by MATLAB 9.3 and HDL Coder 3.11
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 0.0001
// Target subsystem base rate: 0.0001
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        0.002
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// Out2                          ce_out        0.002
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: CIC
// Source Path: CIC_fixp1/CIC
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module CIC
          (clk,
           reset,
           clk_enable,
           In,
           ce_out,
           Out2);


  input   clk;
  input   reset;
  input   clk_enable;
  input   signed [19:0] In;  // sfix20_En15
  output  ce_out;
  output  signed [19:0] Out2;  // sfix20_En15

  wire enb;
  wire enb_1_2_1;
  wire enb_1_2_0;
  wire enb_1_4_1;
  wire enb_1_4_0;
  wire enb_1_20_1;
  wire signed [21:0] First_H2_z_out1;  // sfix22_En17
  reg signed [21:0] Downsample1_bypass_reg;  // sfix22
  wire signed [21:0] Downsample1_out1;  // sfix22_En17
  wire signed [20:0] Second_H2_z_out1;  // sfix21_En16
  reg signed [20:0] Downsample2_bypass_reg;  // sfix21
  wire signed [20:0] Downsample2_out1;  // sfix21_En16
  wire signed [19:0] H5_z_out1;  // sfix20_En15
  reg signed [19:0] Downsample3_bypass_reg;  // sfix20
  wire signed [19:0] Downsample3_out1;  // sfix20_En15
 reg signed [19:0] Downsample3_out1_reg;  // sfix20_En15


  CIC_tc u_CIC_tc (.clk(clk),
                   .reset(reset),
                   .clk_enable(clk_enable),
                   .enb(enb),
                   .enb_1_2_0(enb_1_2_0),
                   .enb_1_2_1(enb_1_2_1),
                   .enb_1_4_0(enb_1_4_0),
                   .enb_1_4_1(enb_1_4_1),
                   .enb_1_20_1(enb_1_20_1)
                   );

  First_H2_z u_First_H2_z (.clk(clk),
                           .reset(reset),
                           .enb(enb),
                           .In(In),  // sfix20_En15
                           .Out2(First_H2_z_out1)  // sfix22_En17
                           );

  // Downsample1: Downsample by 2, Sample offset 0 
  // Downsample bypass register
  always @(posedge clk or posedge reset)
    begin : Downsample1_bypass_process
      if (reset == 1'b1) begin
        Downsample1_bypass_reg <= 22'sb0000000000000000000000;
      end
      else begin
        if (enb_1_2_1) begin
          Downsample1_bypass_reg <= First_H2_z_out1;
        end
      end
    end

  assign Downsample1_out1 = (enb_1_2_1 == 1'b1 ? First_H2_z_out1 :
              Downsample1_bypass_reg);



  Second_H2_z u_Second_H2_z (.clk(clk),
                             .reset(reset),
                             .enb_1_2_0(enb_1_2_0),
                             .In(Downsample1_out1),  // sfix22_En17
                             .Out2(Second_H2_z_out1)  // sfix21_En16
                             );

  // Downsample2: Downsample by 2, Sample offset 0 
  // Downsample bypass register
  always @(posedge clk or posedge reset)
    begin : Downsample2_bypass_process
      if (reset == 1'b1) begin
        Downsample2_bypass_reg <= 21'sb000000000000000000000;
      end
      else begin
        if (enb_1_4_1) begin
          Downsample2_bypass_reg <= Second_H2_z_out1;
        end
      end
    end

  assign Downsample2_out1 = (enb_1_4_1 == 1'b1 ? Second_H2_z_out1 :
              Downsample2_bypass_reg);



  H5_z u_H5_z (.clk(clk),
               .reset(reset),
               .enb_1_4_0(enb_1_4_0),
               .In(Downsample2_out1),  // sfix21_En16
               .Out(H5_z_out1)  // sfix20_En15
               );

  // Downsample3: Downsample by 5, Sample offset 0 
  // Downsample bypass register
  always @(posedge clk or posedge reset)
    begin : Downsample3_bypass_process
      if (reset == 1'b1) begin
        Downsample3_bypass_reg <= 20'sb00000000000000000000;
      end
      else begin
        if (enb_1_20_1) begin
          Downsample3_bypass_reg <= H5_z_out1;
        end
      end
    end

  assign Downsample3_out1 = (enb_1_20_1 == 1'b1 ? H5_z_out1 :
              Downsample3_bypass_reg);


always @ (posedge clk)
	begin
	Downsample3_out1_reg<=Downsample3_out1;
	end

  assign Out2 = Downsample3_out1_reg;

  assign ce_out = enb_1_20_1;

endmodule  // CIC

