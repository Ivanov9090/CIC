// -------------------------------------------------------------
// 
// File Name: D:\Kursach\hdlsrc\CIC_fixp1\H5_z.v
// Created: 2020-11-16 22:11:48
// 
// Generated by MATLAB 9.3 and HDL Coder 3.11
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: H5_z
// Source Path: CIC_fixp1/CIC/H5(z)
// Hierarchy Level: 1
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module H5_z
          (clk,
           reset,
           enb_1_4_0,
           In,
           Out);


  input   clk;
  input   reset;
  input   enb_1_4_0;
  input   signed [20:0] In;  // sfix21_En16
  output  signed [19:0] Out;  // sfix20_En15

  reg signed [20:0] Delay_out1;  // sfix21_En16
  reg signed [20:0] Delay1_out1;  // sfix21_En16
  reg signed [20:0] Delay2_out1;  // sfix21_En16
  reg signed [20:0] Delay3_out1;  // sfix21_En16
  wire signed [23:0] Add_add_cast;  // sfix24_En16
  wire signed [23:0] Add_add_cast_1;  // sfix24_En16
  wire signed [23:0] Add_add_temp;  // sfix24_En16
  wire signed [23:0] Add_add_cast_2;  // sfix24_En16
  wire signed [23:0] Add_add_temp_1;  // sfix24_En16
  wire signed [23:0] Add_add_cast_3;  // sfix24_En16
  wire signed [23:0] Add_add_temp_2;  // sfix24_En16
  wire signed [23:0] Add_add_cast_4;  // sfix24_En16
  wire signed [23:0] Add_add_temp_3;  // sfix24_En16
  wire signed [24:0] Add_out1;  // sfix25_En17
  wire signed [49:0] Gain1_mul_temp;  // sfix50_En43
  wire signed [21:0] Gain1_out1;  // sfix22_En17
  reg signed [21:0] Delay4_out1;  // sfix22_En17
  reg signed [21:0] Delay5_out1;  // sfix22_En17
  reg signed [21:0] Delay6_out1;  // sfix22_En17
  reg signed [21:0] Delay7_out1;  // sfix22_En17
  wire signed [24:0] Add1_add_cast;  // sfix25_En17
  wire signed [24:0] Add1_add_cast_1;  // sfix25_En17
  wire signed [24:0] Add1_add_temp;  // sfix25_En17
  wire signed [24:0] Add1_add_cast_2;  // sfix25_En17
  wire signed [24:0] Add1_add_temp_1;  // sfix25_En17
  wire signed [24:0] Add1_add_cast_3;  // sfix25_En17
  wire signed [24:0] Add1_add_temp_2;  // sfix25_En17
  wire signed [24:0] Add1_add_cast_4;  // sfix25_En17
  wire signed [24:0] Add1_out1;  // sfix25_En17
  wire signed [49:0] Gain2_mul_temp;  // sfix50_En43
  wire signed [21:0] Gain2_out1;  // sfix22_En17
  reg signed [21:0] Delay8_out1;  // sfix22_En17
  reg signed [21:0] Delay9_out1;  // sfix22_En17
  reg signed [21:0] Delay10_out1;  // sfix22_En17
  reg signed [21:0] Delay11_out1;  // sfix22_En17
  wire signed [24:0] Add2_add_cast;  // sfix25_En17
  wire signed [24:0] Add2_add_cast_1;  // sfix25_En17
  wire signed [24:0] Add2_add_temp;  // sfix25_En17
  wire signed [24:0] Add2_add_cast_2;  // sfix25_En17
  wire signed [24:0] Add2_add_temp_1;  // sfix25_En17
  wire signed [24:0] Add2_add_cast_3;  // sfix25_En17
  wire signed [24:0] Add2_add_temp_2;  // sfix25_En17
  wire signed [24:0] Add2_add_cast_4;  // sfix25_En17
  wire signed [24:0] Add2_out1;  // sfix25_En17
  wire signed [49:0] Gain3_mul_temp;  // sfix50_En43
  wire signed [21:0] Gain3_out1;  // sfix22_En17
  reg signed [21:0] Delay12_out1;  // sfix22_En17
  reg signed [21:0] Delay13_out1;  // sfix22_En17
  reg signed [21:0] Delay14_out1;  // sfix22_En17
  reg signed [21:0] Delay15_out1;  // sfix22_En17
  wire signed [24:0] Add3_add_cast;  // sfix25_En17
  wire signed [24:0] Add3_add_cast_1;  // sfix25_En17
  wire signed [24:0] Add3_add_temp;  // sfix25_En17
  wire signed [24:0] Add3_add_cast_2;  // sfix25_En17
  wire signed [24:0] Add3_add_temp_1;  // sfix25_En17
  wire signed [24:0] Add3_add_cast_3;  // sfix25_En17
  wire signed [24:0] Add3_add_temp_2;  // sfix25_En17
  wire signed [24:0] Add3_add_cast_4;  // sfix25_En17
  wire signed [24:0] Add3_out1;  // sfix25_En17
  wire signed [49:0] Gain4_mul_temp;  // sfix50_En43
  wire signed [21:0] Gain4_out1;  // sfix22_En17
  reg signed [21:0] Delay18_out1;  // sfix22_En17
  reg signed [21:0] Delay19_out1;  // sfix22_En17
  reg signed [21:0] Delay20_out1;  // sfix22_En17
  reg signed [21:0] Delay21_out1;  // sfix22_En17
  wire signed [24:0] Add4_add_cast;  // sfix25_En17
  wire signed [24:0] Add4_add_cast_1;  // sfix25_En17
  wire signed [24:0] Add4_add_temp;  // sfix25_En17
  wire signed [24:0] Add4_add_cast_2;  // sfix25_En17
  wire signed [24:0] Add4_add_temp_1;  // sfix25_En17
  wire signed [24:0] Add4_add_cast_3;  // sfix25_En17
  wire signed [24:0] Add4_add_temp_2;  // sfix25_En17
  wire signed [24:0] Add4_add_cast_4;  // sfix25_En17
  wire signed [24:0] Add4_out1;  // sfix25_En17
  wire signed [49:0] Gain5_mul_temp;  // sfix50_En43
  wire signed [21:0] Gain5_out1;  // sfix22_En17
  reg signed [21:0] Delay22_out1;  // sfix22_En17
  reg signed [21:0] Delay23_out1;  // sfix22_En17
  reg signed [21:0] Delay16_out1;  // sfix22_En17
  reg signed [21:0] Delay17_out1;  // sfix22_En17
  wire signed [24:0] Add5_add_cast;  // sfix25_En17
  wire signed [24:0] Add5_add_cast_1;  // sfix25_En17
  wire signed [24:0] Add5_add_temp;  // sfix25_En17
  wire signed [24:0] Add5_add_cast_2;  // sfix25_En17
  wire signed [24:0] Add5_add_temp_1;  // sfix25_En17
  wire signed [24:0] Add5_add_cast_3;  // sfix25_En17
  wire signed [24:0] Add5_add_temp_2;  // sfix25_En17
  wire signed [24:0] Add5_add_cast_4;  // sfix25_En17
  wire signed [24:0] Add5_out1;  // sfix25_En17
  wire signed [49:0] Gain6_mul_temp;  // sfix50_En43
  wire signed [21:0] Gain6_out1;  // sfix22_En17
  reg signed [21:0] Delay24_out1;  // sfix22_En17
  reg signed [21:0] Delay25_out1;  // sfix22_En17
  reg signed [21:0] Delay26_out1;  // sfix22_En17
  reg signed [21:0] Delay27_out1;  // sfix22_En17
  wire signed [24:0] Add6_add_cast;  // sfix25_En17
  wire signed [24:0] Add6_add_cast_1;  // sfix25_En17
  wire signed [24:0] Add6_add_temp;  // sfix25_En17
  wire signed [24:0] Add6_add_cast_2;  // sfix25_En17
  wire signed [24:0] Add6_add_temp_1;  // sfix25_En17
  wire signed [24:0] Add6_add_cast_3;  // sfix25_En17
  wire signed [24:0] Add6_add_temp_2;  // sfix25_En17
  wire signed [24:0] Add6_add_cast_4;  // sfix25_En17
  wire signed [24:0] Add6_out1;  // sfix25_En17
  wire signed [49:0] Gain7_mul_temp;  // sfix50_En43
  wire signed [22:0] Gain7_out1;  // sfix23_En18
  reg signed [22:0] Delay30_out1;  // sfix23_En18
  reg signed [22:0] Delay31_out1;  // sfix23_En18
  reg signed [22:0] Delay32_out1;  // sfix23_En18
  reg signed [22:0] Delay33_out1;  // sfix23_En18
  wire signed [25:0] Add7_add_cast;  // sfix26_En18
  wire signed [25:0] Add7_add_cast_1;  // sfix26_En18
  wire signed [25:0] Add7_add_temp;  // sfix26_En18
  wire signed [25:0] Add7_add_cast_2;  // sfix26_En18
  wire signed [25:0] Add7_add_temp_1;  // sfix26_En18
  wire signed [25:0] Add7_add_cast_3;  // sfix26_En18
  wire signed [25:0] Add7_add_temp_2;  // sfix26_En18
  wire signed [25:0] Add7_add_cast_4;  // sfix26_En18
  wire signed [25:0] Add7_add_temp_3;  // sfix26_En18
  wire signed [24:0] Add7_out1;  // sfix25_En17
  wire signed [49:0] Gain8_mul_temp;  // sfix50_En43
  wire signed [22:0] Gain8_out1;  // sfix23_En18
  reg signed [22:0] Delay34_out1;  // sfix23_En18
  reg signed [22:0] Delay35_out1;  // sfix23_En18
  reg signed [22:0] Delay28_out1;  // sfix23_En18
  reg signed [22:0] Delay29_out1;  // sfix23_En18
  wire signed [25:0] Add8_add_cast;  // sfix26_En18
  wire signed [25:0] Add8_add_cast_1;  // sfix26_En18
  wire signed [25:0] Add8_add_temp;  // sfix26_En18
  wire signed [25:0] Add8_add_cast_2;  // sfix26_En18
  wire signed [25:0] Add8_add_temp_1;  // sfix26_En18
  wire signed [25:0] Add8_add_cast_3;  // sfix26_En18
  wire signed [25:0] Add8_add_temp_2;  // sfix26_En18
  wire signed [25:0] Add8_add_cast_4;  // sfix26_En18
  wire signed [25:0] Add8_add_temp_3;  // sfix26_En18
  wire signed [24:0] Add8_out1;  // sfix25_En17
  wire signed [49:0] Gain9_mul_temp;  // sfix50_En43
  wire signed [22:0] Gain9_out1;  // sfix23_En18
  reg signed [22:0] Delay36_out1;  // sfix23_En18
  reg signed [22:0] Delay37_out1;  // sfix23_En18
  reg signed [22:0] Delay38_out1;  // sfix23_En18
  reg signed [22:0] Delay39_out1;  // sfix23_En18
  wire signed [25:0] Add9_add_cast;  // sfix26_En18
  wire signed [25:0] Add9_add_cast_1;  // sfix26_En18
  wire signed [25:0] Add9_add_temp;  // sfix26_En18
  wire signed [25:0] Add9_add_cast_2;  // sfix26_En18
  wire signed [25:0] Add9_add_temp_1;  // sfix26_En18
  wire signed [25:0] Add9_add_cast_3;  // sfix26_En18
  wire signed [25:0] Add9_add_temp_2;  // sfix26_En18
  wire signed [25:0] Add9_add_cast_4;  // sfix26_En18
  wire signed [25:0] Add9_add_temp_3;  // sfix26_En18
  wire signed [24:0] Add9_out1;  // sfix25_En17
  wire signed [49:0] Gain_mul_temp;  // sfix50_En43
  wire signed [19:0] Gain_out1;  // sfix20_En15


  always @(posedge clk or posedge reset)
    begin : Delay_process
      if (reset == 1'b1) begin
        Delay_out1 <= 21'sb000000000000000000000;
      end
      else begin
        if (enb_1_4_0) begin
          Delay_out1 <= In;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_out1 <= 21'sb000000000000000000000;
      end
      else begin
        if (enb_1_4_0) begin
          Delay1_out1 <= Delay_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay2_process
      if (reset == 1'b1) begin
        Delay2_out1 <= 21'sb000000000000000000000;
      end
      else begin
        if (enb_1_4_0) begin
          Delay2_out1 <= Delay1_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay3_process
      if (reset == 1'b1) begin
        Delay3_out1 <= 21'sb000000000000000000000;
      end
      else begin
        if (enb_1_4_0) begin
          Delay3_out1 <= Delay2_out1;
        end
      end
    end



  assign Add_add_cast = {{3{In[20]}}, In};
  assign Add_add_cast_1 = {{3{Delay_out1[20]}}, Delay_out1};
  assign Add_add_temp = Add_add_cast + Add_add_cast_1;
  assign Add_add_cast_2 = {{3{Delay1_out1[20]}}, Delay1_out1};
  assign Add_add_temp_1 = Add_add_temp + Add_add_cast_2;
  assign Add_add_cast_3 = {{3{Delay2_out1[20]}}, Delay2_out1};
  assign Add_add_temp_2 = Add_add_temp_1 + Add_add_cast_3;
  assign Add_add_cast_4 = {{3{Delay3_out1[20]}}, Delay3_out1};
  assign Add_add_temp_3 = Add_add_temp_2 + Add_add_cast_4;
  assign Add_out1 = {Add_add_temp_3, 1'b0};



  assign Gain1_mul_temp = 25'sb0110011001100110011001101 * Add_out1;
  assign Gain1_out1 = Gain1_mul_temp[47:26];



  always @(posedge clk or posedge reset)
    begin : Delay4_process
      if (reset == 1'b1) begin
        Delay4_out1 <= 22'sb0000000000000000000000;
      end
      else begin
        if (enb_1_4_0) begin
          Delay4_out1 <= Gain1_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay5_process
      if (reset == 1'b1) begin
        Delay5_out1 <= 22'sb0000000000000000000000;
      end
      else begin
        if (enb_1_4_0) begin
          Delay5_out1 <= Delay4_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay6_process
      if (reset == 1'b1) begin
        Delay6_out1 <= 22'sb0000000000000000000000;
      end
      else begin
        if (enb_1_4_0) begin
          Delay6_out1 <= Delay5_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay7_process
      if (reset == 1'b1) begin
        Delay7_out1 <= 22'sb0000000000000000000000;
      end
      else begin
        if (enb_1_4_0) begin
          Delay7_out1 <= Delay6_out1;
        end
      end
    end



  assign Add1_add_cast = {{3{Gain1_out1[21]}}, Gain1_out1};
  assign Add1_add_cast_1 = {{3{Delay4_out1[21]}}, Delay4_out1};
  assign Add1_add_temp = Add1_add_cast + Add1_add_cast_1;
  assign Add1_add_cast_2 = {{3{Delay5_out1[21]}}, Delay5_out1};
  assign Add1_add_temp_1 = Add1_add_temp + Add1_add_cast_2;
  assign Add1_add_cast_3 = {{3{Delay6_out1[21]}}, Delay6_out1};
  assign Add1_add_temp_2 = Add1_add_temp_1 + Add1_add_cast_3;
  assign Add1_add_cast_4 = {{3{Delay7_out1[21]}}, Delay7_out1};
  assign Add1_out1 = Add1_add_temp_2 + Add1_add_cast_4;



  assign Gain2_mul_temp = 25'sb0110011001100110011001101 * Add1_out1;
  assign Gain2_out1 = Gain2_mul_temp[47:26];



  always @(posedge clk or posedge reset)
    begin : Delay8_process
      if (reset == 1'b1) begin
        Delay8_out1 <= 22'sb0000000000000000000000;
      end
      else begin
        if (enb_1_4_0) begin
          Delay8_out1 <= Gain2_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay9_process
      if (reset == 1'b1) begin
        Delay9_out1 <= 22'sb0000000000000000000000;
      end
      else begin
        if (enb_1_4_0) begin
          Delay9_out1 <= Delay8_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay10_process
      if (reset == 1'b1) begin
        Delay10_out1 <= 22'sb0000000000000000000000;
      end
      else begin
        if (enb_1_4_0) begin
          Delay10_out1 <= Delay9_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay11_process
      if (reset == 1'b1) begin
        Delay11_out1 <= 22'sb0000000000000000000000;
      end
      else begin
        if (enb_1_4_0) begin
          Delay11_out1 <= Delay10_out1;
        end
      end
    end



  assign Add2_add_cast = {{3{Gain2_out1[21]}}, Gain2_out1};
  assign Add2_add_cast_1 = {{3{Delay8_out1[21]}}, Delay8_out1};
  assign Add2_add_temp = Add2_add_cast + Add2_add_cast_1;
  assign Add2_add_cast_2 = {{3{Delay9_out1[21]}}, Delay9_out1};
  assign Add2_add_temp_1 = Add2_add_temp + Add2_add_cast_2;
  assign Add2_add_cast_3 = {{3{Delay10_out1[21]}}, Delay10_out1};
  assign Add2_add_temp_2 = Add2_add_temp_1 + Add2_add_cast_3;
  assign Add2_add_cast_4 = {{3{Delay11_out1[21]}}, Delay11_out1};
  assign Add2_out1 = Add2_add_temp_2 + Add2_add_cast_4;



  assign Gain3_mul_temp = 25'sb0110011001100110011001101 * Add2_out1;
  assign Gain3_out1 = Gain3_mul_temp[47:26];



  always @(posedge clk or posedge reset)
    begin : Delay12_process
      if (reset == 1'b1) begin
        Delay12_out1 <= 22'sb0000000000000000000000;
      end
      else begin
        if (enb_1_4_0) begin
          Delay12_out1 <= Gain3_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay13_process
      if (reset == 1'b1) begin
        Delay13_out1 <= 22'sb0000000000000000000000;
      end
      else begin
        if (enb_1_4_0) begin
          Delay13_out1 <= Delay12_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay14_process
      if (reset == 1'b1) begin
        Delay14_out1 <= 22'sb0000000000000000000000;
      end
      else begin
        if (enb_1_4_0) begin
          Delay14_out1 <= Delay13_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay15_process
      if (reset == 1'b1) begin
        Delay15_out1 <= 22'sb0000000000000000000000;
      end
      else begin
        if (enb_1_4_0) begin
          Delay15_out1 <= Delay14_out1;
        end
      end
    end



  assign Add3_add_cast = {{3{Gain3_out1[21]}}, Gain3_out1};
  assign Add3_add_cast_1 = {{3{Delay12_out1[21]}}, Delay12_out1};
  assign Add3_add_temp = Add3_add_cast + Add3_add_cast_1;
  assign Add3_add_cast_2 = {{3{Delay13_out1[21]}}, Delay13_out1};
  assign Add3_add_temp_1 = Add3_add_temp + Add3_add_cast_2;
  assign Add3_add_cast_3 = {{3{Delay14_out1[21]}}, Delay14_out1};
  assign Add3_add_temp_2 = Add3_add_temp_1 + Add3_add_cast_3;
  assign Add3_add_cast_4 = {{3{Delay15_out1[21]}}, Delay15_out1};
  assign Add3_out1 = Add3_add_temp_2 + Add3_add_cast_4;



  assign Gain4_mul_temp = 25'sb0110011001100110011001101 * Add3_out1;
  assign Gain4_out1 = Gain4_mul_temp[47:26];



  always @(posedge clk or posedge reset)
    begin : Delay18_process
      if (reset == 1'b1) begin
        Delay18_out1 <= 22'sb0000000000000000000000;
      end
      else begin
        if (enb_1_4_0) begin
          Delay18_out1 <= Gain4_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay19_process
      if (reset == 1'b1) begin
        Delay19_out1 <= 22'sb0000000000000000000000;
      end
      else begin
        if (enb_1_4_0) begin
          Delay19_out1 <= Delay18_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay20_process
      if (reset == 1'b1) begin
        Delay20_out1 <= 22'sb0000000000000000000000;
      end
      else begin
        if (enb_1_4_0) begin
          Delay20_out1 <= Delay19_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay21_process
      if (reset == 1'b1) begin
        Delay21_out1 <= 22'sb0000000000000000000000;
      end
      else begin
        if (enb_1_4_0) begin
          Delay21_out1 <= Delay20_out1;
        end
      end
    end



  assign Add4_add_cast = {{3{Gain4_out1[21]}}, Gain4_out1};
  assign Add4_add_cast_1 = {{3{Delay18_out1[21]}}, Delay18_out1};
  assign Add4_add_temp = Add4_add_cast + Add4_add_cast_1;
  assign Add4_add_cast_2 = {{3{Delay19_out1[21]}}, Delay19_out1};
  assign Add4_add_temp_1 = Add4_add_temp + Add4_add_cast_2;
  assign Add4_add_cast_3 = {{3{Delay20_out1[21]}}, Delay20_out1};
  assign Add4_add_temp_2 = Add4_add_temp_1 + Add4_add_cast_3;
  assign Add4_add_cast_4 = {{3{Delay21_out1[21]}}, Delay21_out1};
  assign Add4_out1 = Add4_add_temp_2 + Add4_add_cast_4;



  assign Gain5_mul_temp = 25'sb0110011001100110011001101 * Add4_out1;
  assign Gain5_out1 = Gain5_mul_temp[47:26];



  always @(posedge clk or posedge reset)
    begin : Delay22_process
      if (reset == 1'b1) begin
        Delay22_out1 <= 22'sb0000000000000000000000;
      end
      else begin
        if (enb_1_4_0) begin
          Delay22_out1 <= Gain5_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay23_process
      if (reset == 1'b1) begin
        Delay23_out1 <= 22'sb0000000000000000000000;
      end
      else begin
        if (enb_1_4_0) begin
          Delay23_out1 <= Delay22_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay16_process
      if (reset == 1'b1) begin
        Delay16_out1 <= 22'sb0000000000000000000000;
      end
      else begin
        if (enb_1_4_0) begin
          Delay16_out1 <= Delay23_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay17_process
      if (reset == 1'b1) begin
        Delay17_out1 <= 22'sb0000000000000000000000;
      end
      else begin
        if (enb_1_4_0) begin
          Delay17_out1 <= Delay16_out1;
        end
      end
    end



  assign Add5_add_cast = {{3{Gain5_out1[21]}}, Gain5_out1};
  assign Add5_add_cast_1 = {{3{Delay22_out1[21]}}, Delay22_out1};
  assign Add5_add_temp = Add5_add_cast + Add5_add_cast_1;
  assign Add5_add_cast_2 = {{3{Delay23_out1[21]}}, Delay23_out1};
  assign Add5_add_temp_1 = Add5_add_temp + Add5_add_cast_2;
  assign Add5_add_cast_3 = {{3{Delay16_out1[21]}}, Delay16_out1};
  assign Add5_add_temp_2 = Add5_add_temp_1 + Add5_add_cast_3;
  assign Add5_add_cast_4 = {{3{Delay17_out1[21]}}, Delay17_out1};
  assign Add5_out1 = Add5_add_temp_2 + Add5_add_cast_4;



  assign Gain6_mul_temp = 25'sb0110011001100110011001101 * Add5_out1;
  assign Gain6_out1 = Gain6_mul_temp[47:26];



  always @(posedge clk or posedge reset)
    begin : Delay24_process
      if (reset == 1'b1) begin
        Delay24_out1 <= 22'sb0000000000000000000000;
      end
      else begin
        if (enb_1_4_0) begin
          Delay24_out1 <= Gain6_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay25_process
      if (reset == 1'b1) begin
        Delay25_out1 <= 22'sb0000000000000000000000;
      end
      else begin
        if (enb_1_4_0) begin
          Delay25_out1 <= Delay24_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay26_process
      if (reset == 1'b1) begin
        Delay26_out1 <= 22'sb0000000000000000000000;
      end
      else begin
        if (enb_1_4_0) begin
          Delay26_out1 <= Delay25_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay27_process
      if (reset == 1'b1) begin
        Delay27_out1 <= 22'sb0000000000000000000000;
      end
      else begin
        if (enb_1_4_0) begin
          Delay27_out1 <= Delay26_out1;
        end
      end
    end



  assign Add6_add_cast = {{3{Gain6_out1[21]}}, Gain6_out1};
  assign Add6_add_cast_1 = {{3{Delay24_out1[21]}}, Delay24_out1};
  assign Add6_add_temp = Add6_add_cast + Add6_add_cast_1;
  assign Add6_add_cast_2 = {{3{Delay25_out1[21]}}, Delay25_out1};
  assign Add6_add_temp_1 = Add6_add_temp + Add6_add_cast_2;
  assign Add6_add_cast_3 = {{3{Delay26_out1[21]}}, Delay26_out1};
  assign Add6_add_temp_2 = Add6_add_temp_1 + Add6_add_cast_3;
  assign Add6_add_cast_4 = {{3{Delay27_out1[21]}}, Delay27_out1};
  assign Add6_out1 = Add6_add_temp_2 + Add6_add_cast_4;



  assign Gain7_mul_temp = 25'sb0110011001100110011001101 * Add6_out1;
  assign Gain7_out1 = Gain7_mul_temp[47:25];



  always @(posedge clk or posedge reset)
    begin : Delay30_process
      if (reset == 1'b1) begin
        Delay30_out1 <= 23'sb00000000000000000000000;
      end
      else begin
        if (enb_1_4_0) begin
          Delay30_out1 <= Gain7_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay31_process
      if (reset == 1'b1) begin
        Delay31_out1 <= 23'sb00000000000000000000000;
      end
      else begin
        if (enb_1_4_0) begin
          Delay31_out1 <= Delay30_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay32_process
      if (reset == 1'b1) begin
        Delay32_out1 <= 23'sb00000000000000000000000;
      end
      else begin
        if (enb_1_4_0) begin
          Delay32_out1 <= Delay31_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay33_process
      if (reset == 1'b1) begin
        Delay33_out1 <= 23'sb00000000000000000000000;
      end
      else begin
        if (enb_1_4_0) begin
          Delay33_out1 <= Delay32_out1;
        end
      end
    end



  assign Add7_add_cast = {{3{Gain7_out1[22]}}, Gain7_out1};
  assign Add7_add_cast_1 = {{3{Delay30_out1[22]}}, Delay30_out1};
  assign Add7_add_temp = Add7_add_cast + Add7_add_cast_1;
  assign Add7_add_cast_2 = {{3{Delay31_out1[22]}}, Delay31_out1};
  assign Add7_add_temp_1 = Add7_add_temp + Add7_add_cast_2;
  assign Add7_add_cast_3 = {{3{Delay32_out1[22]}}, Delay32_out1};
  assign Add7_add_temp_2 = Add7_add_temp_1 + Add7_add_cast_3;
  assign Add7_add_cast_4 = {{3{Delay33_out1[22]}}, Delay33_out1};
  assign Add7_add_temp_3 = Add7_add_temp_2 + Add7_add_cast_4;
  assign Add7_out1 = Add7_add_temp_3[25:1];



  assign Gain8_mul_temp = 25'sb0110011001100110011001101 * Add7_out1;
  assign Gain8_out1 = Gain8_mul_temp[47:25];



  always @(posedge clk or posedge reset)
    begin : Delay34_process
      if (reset == 1'b1) begin
        Delay34_out1 <= 23'sb00000000000000000000000;
      end
      else begin
        if (enb_1_4_0) begin
          Delay34_out1 <= Gain8_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay35_process
      if (reset == 1'b1) begin
        Delay35_out1 <= 23'sb00000000000000000000000;
      end
      else begin
        if (enb_1_4_0) begin
          Delay35_out1 <= Delay34_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay28_process
      if (reset == 1'b1) begin
        Delay28_out1 <= 23'sb00000000000000000000000;
      end
      else begin
        if (enb_1_4_0) begin
          Delay28_out1 <= Delay35_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay29_process
      if (reset == 1'b1) begin
        Delay29_out1 <= 23'sb00000000000000000000000;
      end
      else begin
        if (enb_1_4_0) begin
          Delay29_out1 <= Delay28_out1;
        end
      end
    end



  assign Add8_add_cast = {{3{Gain8_out1[22]}}, Gain8_out1};
  assign Add8_add_cast_1 = {{3{Delay34_out1[22]}}, Delay34_out1};
  assign Add8_add_temp = Add8_add_cast + Add8_add_cast_1;
  assign Add8_add_cast_2 = {{3{Delay35_out1[22]}}, Delay35_out1};
  assign Add8_add_temp_1 = Add8_add_temp + Add8_add_cast_2;
  assign Add8_add_cast_3 = {{3{Delay28_out1[22]}}, Delay28_out1};
  assign Add8_add_temp_2 = Add8_add_temp_1 + Add8_add_cast_3;
  assign Add8_add_cast_4 = {{3{Delay29_out1[22]}}, Delay29_out1};
  assign Add8_add_temp_3 = Add8_add_temp_2 + Add8_add_cast_4;
  assign Add8_out1 = Add8_add_temp_3[25:1];



  assign Gain9_mul_temp = 25'sb0110011001100110011001101 * Add8_out1;
  assign Gain9_out1 = Gain9_mul_temp[47:25];



  always @(posedge clk or posedge reset)
    begin : Delay36_process
      if (reset == 1'b1) begin
        Delay36_out1 <= 23'sb00000000000000000000000;
      end
      else begin
        if (enb_1_4_0) begin
          Delay36_out1 <= Gain9_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay37_process
      if (reset == 1'b1) begin
        Delay37_out1 <= 23'sb00000000000000000000000;
      end
      else begin
        if (enb_1_4_0) begin
          Delay37_out1 <= Delay36_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay38_process
      if (reset == 1'b1) begin
        Delay38_out1 <= 23'sb00000000000000000000000;
      end
      else begin
        if (enb_1_4_0) begin
          Delay38_out1 <= Delay37_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay39_process
      if (reset == 1'b1) begin
        Delay39_out1 <= 23'sb00000000000000000000000;
      end
      else begin
        if (enb_1_4_0) begin
          Delay39_out1 <= Delay38_out1;
        end
      end
    end



  assign Add9_add_cast = {{3{Gain9_out1[22]}}, Gain9_out1};
  assign Add9_add_cast_1 = {{3{Delay36_out1[22]}}, Delay36_out1};
  assign Add9_add_temp = Add9_add_cast + Add9_add_cast_1;
  assign Add9_add_cast_2 = {{3{Delay37_out1[22]}}, Delay37_out1};
  assign Add9_add_temp_1 = Add9_add_temp + Add9_add_cast_2;
  assign Add9_add_cast_3 = {{3{Delay38_out1[22]}}, Delay38_out1};
  assign Add9_add_temp_2 = Add9_add_temp_1 + Add9_add_cast_3;
  assign Add9_add_cast_4 = {{3{Delay39_out1[22]}}, Delay39_out1};
  assign Add9_add_temp_3 = Add9_add_temp_2 + Add9_add_cast_4;
  assign Add9_out1 = Add9_add_temp_3[25:1];



  assign Gain_mul_temp = 25'sb0110011001100110011001101 * Add9_out1;
  assign Gain_out1 = Gain_mul_temp[47:28];



  assign Out = Gain_out1;

endmodule  // H5_z
