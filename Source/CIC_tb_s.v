// -------------------------------------------------------------
// 
// File Name: D:\Kursach\hdlsrc\CIC_fixp1\CIC_tb_s.v
// Created: 2020-11-16 22:12:42
// 
// Generated by MATLAB 9.3 and HDL Coder 3.11
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 0.0001
// Target subsystem base rate: 0.0001
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        0.002
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// Out2                          ce_out        0.002
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: CIC_tb_s
// Source Path: 
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module CIC_tb;


  reg  clk;
  reg  reset;
  wire clk_enable;
  wire Out2_done;  // ufix1
  wire ce_out;
  wire Out2_done_enb;  // ufix1
  reg [13:0] Out2_addr;  // ufix14
  wire Out2_active;  // ufix1
  reg [17:0] Signal_From_Workspace_out1_addr;  // ufix18
  wire Signal_From_Workspace_out1_active;  // ufix1
  reg  tb_enb_delay;
  wire Signal_From_Workspace_out1_enb;  // ufix1
  wire [17:0] Signal_From_Workspace_out1_addr_delay_1;  // ufix18
  reg signed [31:0] fp_In;  // sfix32
  reg signed [19:0] rawData_In;  // sfix20_En15
  reg signed [31:0] status_In;  // sfix32
  reg signed [19:0] holdData_In;  // sfix20_En15
  reg signed [19:0] In_offset;  // sfix20_En15
  wire signed [19:0] In;  // sfix20_En15
  wire snkDone;
  wire snkDonen;
  wire resetn;
  wire tb_enb;
  wire notDone;
  wire signed [19:0] Out2;  // sfix20_En15
  wire Out2_enb;  // ufix1
  wire Out2_lastAddr;  // ufix1
  reg  check1_done;  // ufix1
  wire [13:0] Out2_addr_delay_1;  // ufix14
  reg signed [31:0] fp_Out2_expected;  // sfix32
  reg signed [19:0] Out2_expected;  // sfix20_En15
  reg signed [31:0] status_Out2_expected;  // sfix32
  reg signed [19:0] Out2_ref_hold;  // sfix20_En15
  wire signed [19:0] Out2_refTmp;  // sfix20_En15
  reg signed [19:0] Out2_refreg;  // sfix20_En15
  wire signed [19:0] Out2_ref;  // sfix20_En15
  reg  Out2_testFailure;  // ufix1
  wire testFailure;  // ufix1


  assign Out2_done_enb = Out2_done & ce_out;



  assign Out2_active = Out2_addr != 14'b10011100010000;



  assign Signal_From_Workspace_out1_active = Signal_From_Workspace_out1_addr != 18'b110000110101000000;



  assign Signal_From_Workspace_out1_enb = Signal_From_Workspace_out1_active & (tb_enb_delay & tb_enb_delay);



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 200000
  always @(posedge clk or posedge reset)
    begin : SignalFromWorkspace_process
      if (reset == 1'b1) begin
        Signal_From_Workspace_out1_addr <= 18'b000000000000000000;
      end
      else begin
        if (Signal_From_Workspace_out1_enb) begin
          if (Signal_From_Workspace_out1_addr >= 18'b110000110101000000) begin
            Signal_From_Workspace_out1_addr <= 18'b000000000000000000;
          end
          else begin
            Signal_From_Workspace_out1_addr <= Signal_From_Workspace_out1_addr + 18'b000000000000000001;
          end
        end
      end
    end



  assign #1 Signal_From_Workspace_out1_addr_delay_1 = Signal_From_Workspace_out1_addr;

  // Data source for In
  initial
    begin : In_fileread
      fp_In = $fopen("../Source/In.dat", "r");
      status_In = $rewind(fp_In);
    end

  always @(Signal_From_Workspace_out1_addr_delay_1, tb_enb_delay, tb_enb_delay)
    begin
      if (tb_enb_delay == 0) begin
        rawData_In <= 20'bx;
      end
      else if (tb_enb_delay == 1) begin
        status_In = $fscanf(fp_In, "%h", rawData_In);
      end
    end

  // holdData reg for Signal_From_Workspace_out1
  always @(posedge clk or posedge reset)
    begin : stimuli_Signal_From_Workspace_out1
      if (reset) begin
        holdData_In <= 20'bx;
      end
      else begin
        holdData_In <= rawData_In;
      end
    end

  always @(rawData_In or tb_enb_delay)
    begin : stimuli_Signal_From_Workspace_out1_1
      if (tb_enb_delay == 1'b0) begin
        In_offset <= holdData_In;
      end
      else begin
        In_offset <= rawData_In;
      end
    end

  assign #2 In = In_offset;

  assign snkDonen =  ~ snkDone;



  assign resetn =  ~ reset;



  assign tb_enb = resetn & snkDonen;



  // Delay inside enable generation: register depth 1
  always @(posedge clk or posedge reset)
    begin : u_enable_delay
      if (reset) begin
        tb_enb_delay <= 0;
      end
      else begin
        tb_enb_delay <= tb_enb;
      end
    end

  assign notDone = tb_enb_delay & snkDonen;



  assign #2 clk_enable = notDone;

  initial
    begin : reset_gen
      reset <= 1'b1;
      # (1000);
      @ (posedge clk)
      # (100);
      reset <= 1'b0;
    end

  // Count limited, Unsigned Counter
  //  initial value   = 1
  //  step value      = 1
  //  count to value  = 19
  always 
    begin : clk_gen
      clk <= 1'b1;
      # (250);
      clk <= 1'b0;
      # (250);
      if (snkDone == 1'b1) begin
        clk <= 1'b1;
        # (250);
        clk <= 1'b0;
        # (250);
        $stop;
      end
    end

  CIC u_CIC (.clk(clk),
             .reset(reset),
             .clk_enable(clk_enable),
             .In(In),  // sfix20_En15
             .ce_out(ce_out),
             .Out2(Out2)  // sfix20_En15
             );

  assign Out2_enb = ce_out & Out2_active;



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 10000
  always @(posedge clk or posedge reset)
    begin : c_2_process
      if (reset == 1'b1) begin
        Out2_addr <= 14'b00000000000000;
      end
      else begin
        if (Out2_enb) begin
          if (Out2_addr >= 14'b10011100010000) begin
            Out2_addr <= 14'b00000000000000;
          end
          else begin
            Out2_addr <= Out2_addr + 14'b00000000000001;
          end
        end
      end
    end



  assign Out2_lastAddr = Out2_addr >= 14'b10011100010000;



  assign Out2_done = Out2_lastAddr & resetn;



  // Delay to allow last sim cycle to complete
  always @(posedge clk or posedge reset)
    begin : checkDone_1
      if (reset) begin
        check1_done <= 0;
      end
      else begin
        if (Out2_done_enb) begin
          check1_done <= Out2_done;
        end
      end
    end

  assign snkDone = check1_done;

  assign #1 Out2_addr_delay_1 = Out2_addr;

  // Data source for Out2_expected
  initial
    begin : Out2_expected_fileread
      fp_Out2_expected = $fopen("../Source/Out2_expected.dat", "r");
      status_Out2_expected = $rewind(fp_Out2_expected);
    end

  always @(Out2_addr_delay_1,  tb_enb_delay)
    begin
      if (tb_enb_delay == 0) begin
        Out2_expected <= 20'bx;
      end
      else  begin
        status_Out2_expected = $fscanf(fp_Out2_expected, "%h", Out2_expected);
      end
    end

  // Bypass register to hold Out2_ref
  always @(posedge clk or posedge reset)
    begin : DataHold_Out2_ref
      if (reset) begin
        Out2_ref_hold <= 0;
      end
      else begin
        if (ce_out) begin
          Out2_ref_hold <= Out2_expected;
        end
      end
    end

  assign Out2_refTmp = Out2_expected;


  assign Out2_ref = (ce_out == 1'b0 ? Out2_ref_hold :
              Out2_refTmp);

 always @ (posedge clk)
	begin
	Out2_refreg <= Out2_ref;
	end


  always @(posedge clk or posedge reset)
    begin : Out2_checker
      if (reset == 1'b1) begin
        Out2_testFailure <= 1'b0;
      end
      else begin
        if (ce_out == 1'b1 && Out2 !== Out2_ref) begin
          Out2_testFailure <= 1'b1;
          $display("ERROR in Out2 at time %t : Expected '%h' Actual '%h'", $time, Out2_ref, Out2);
        end
      end
    end

  assign testFailure = Out2_testFailure;

  always @(posedge clk)
    begin : completed_msg
      if (snkDone == 1'b1) begin
        if (testFailure == 1'b0) begin
          $display("**************TEST COMPLETED (PASSED)**************");
        end
        else begin
          $display("**************TEST COMPLETED (FAILED)**************");
        end
      end
    end

endmodule  // CIC_tb

